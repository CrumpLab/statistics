plot(hold1)
points(hold1)
points.stDist
points.stdist
protoMP
summary(protoMP)
plot(protoMP)
points(protoMP)
plot.ppPrototype <-#
function(x, xlim=NULL, ylim=NULL, pch=1, col=1, cex=1, yPos=NULL, Dims=1:2, xlab=NULL, ylab=NULL, ...){#
	if(x$dim >= 2){#
		hold           <- x#
		hold$prototype <- x$prototype[,Dims[1:2]]#
		hold$dim       <- 2#
		x              <- hold#
		if(is.null(xlab)[1]){#
			xlab <- paste('dim', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- paste('dim', Dims[2])#
		}#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- range(x$prototype[,2])#
		}#
		plot(x$prototype[,1], x$prototype[,2], col=col, pch=pch, cex=cex, xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, ...)#
	} else {#
		if(is.null(xlab)[1]){#
			xlab <- paste('dimension', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- ''#
		}#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(yPos[1])){#
			yPos <- rep(0, dim(x$prototype)[1])#
		} else if(length(yPos) == 1){#
			yPos <- rep(yPos, dim(x$prototype)[1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- yPos[1] + 0.5*c(-1,1)#
		}#
		plot(x$prototype[,Dims[1]], yPos, col=col, pch=pch, cex=cex, xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, ...)#
	}#
}
plot(protoMP)
points(protoMP)
ppc
summary(ppc)
plot(ppc)
points(ppc)
points.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', Dims=1:2, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- x$wts[x$key]/min(x$wts[x$key])*0.7#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1 || length(Dims) == 1){#
		if(x$dim == 1){#
			Dims <- 1#
		}#
		points(x$points[,Dims], x$key, pch=pch, cex=cex, col=col, ...)#
	} else {#
		points(x$points[,1:2], pch=pch, cex=cex, col=col, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
points(ppc)
plot(ppc)
points(ppc)
?collEx1
data(collEx1)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
#
#===> compute the prototype using VP97 <===##
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
points(protoVP, pch=20, cex=2, col='#FF000088')#
#
#===>compute the prototype using margPT <===##
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
# both algorithms produce very similar results
?collEx2
data(collEx2)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx2[,2:3], collEx2[,1])#
plot(ppc)#
#
#===>compute the prototype via use margPT <===##
protoMP <- ppPrototype(ppc, 0.1)#
points(protoMP, pch=20, cex=3.5, col='#FF000088')#
# both algorithms produce very similar results
data(collEx1)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
#
#===> compute the prototype using VP97 <===##
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
points(protoVP, pch=20, cex=2, col='#FF000088')#
#
#===>compute the prototype using margPT <===##
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
# both algorithms produce very similar results
data(collEx2)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx2[,2:3], collEx2[,1])#
plot(ppc)#
#
#===>compute the prototype via use margPT <===##
protoMP <- ppPrototype(ppc, 0.1)#
points(protoMP, pch=20, cex=3.5, col='#FF000088')#
# both algorithms produce very similar results
?pattEx1
data(pattEx1)#
#
#===> obtain the patterns <===##
x <- pattEx1[pattEx1[,1] == 1,2]#
y <- pattEx1[pattEx1[,1] == 2,2]#
par(mfrow=1:2)#
#
#===> compute distance via VP97 <===##
(dVP <- stDist(x, y, 0.5, alg='VP97'))#
plot(dVP)#
#
#===> compute distance via IMA <===##
(dIMA <- stDist(x, y, 0.5, alg='IMA'))#
plot(dIMA)
#===> compute distance via MSU <===##
(dMSU <- stDist(x, y, 0.5, alg='MSU'))
summary(dMSU)
?pattEx2
data(pattEx2)#
#
#===> obtain the patterns <===##
x <- pattEx2[pattEx2[,1] == 1,2:3]#
y <- pattEx2[pattEx2[,1] == 2,2:3]#
#
#===> compute distance (via IMA) <===##
(d <- stDist(x, y, 0.5))#
plot(d)
summary(d)
?neurNaive
data(neurNaive)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(3,1,3,5)#
wtsKey <- 1:268#
# cat information from original data#
cats   <- c(rep(1,66), rep(2,39), rep(3,80), rep(4,83))#
for(i in 1:4){#
	these <- unique(neurNaive[neurNaive[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurNaive[,2]#
key <- neurNaive[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0106, pa=1.1, pd=0.9, alg='kernPT', ppd=5000, bypassCheck=TRUE))
points(protoKP)
plot(ppc)
points(protoKP)
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
range(ppc$points)
?neurCond
data(neurCond)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(6,4,15,5,5)#
wtsKey <- 1:256#
# cat information from original data#
cats   <- c(rep(1,29), rep(2,55), rep(3,31), rep(4,16),#
		rep(3,54), rep(5,44), rep(3,27))#
for(i in 1:5){#
	these <- unique(neurCond[neurCond[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurCond[,2]#
key <- neurCond[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
# did not need to list nMissing since implied through wts/wtsKey#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0075, pa=1.1125, pd=0.8875, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
data(neurBd)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(0,1,5)#
wtsKey <- 1:78#
# cat information from original data#
cats   <- c(rep(1,22), rep(2,6), rep(3,50))#
for(i in 1:3){#
	these <- unique(neurBd[neurBd[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurBd[,2]#
key <- neurBd[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0078, pa=1.125, pd=0.885, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-5)
?neurBd
points.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', Dims=1:2, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- sqrt(x$wts[x$key]/min(x$wts[x$key])*0.7)#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1 || length(Dims) == 1){#
		if(x$dim == 1){#
			Dims <- 1#
		}#
		points(x$points[,Dims], x$key, pch=pch, cex=cex, col=col, ...)#
	} else {#
		points(x$points[,1:2], pch=pch, cex=cex, col=col, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
plot.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', xlab=NULL, ylab=NULL, Dims=1:2, ylim=NULL, addLines=FALSE, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- sqrt(x$wts[x$key]/min(x$wts[x$key])*0.7)#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1){#
		if(is.null(xlab)[1]){#
			xlab <- paste('dimension', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- 'pattern'#
		}#
		if(is.null(ylim[1])){#
			R <- range(x$key)#
			ylim <- R + c(-1,1)*diff(R)/10#
		}#
		plot(x$points[,1], x$key, pch=pch, cex=cex, col=col, xlab=xlab, ylab=ylab, ylim=ylim, ...)#
		if(addLines[1]){#
			abline(h=0:x$keyMax, col='#00000033')#
			abline(h=seq(0,x$keyMax,5), col='#00000066')#
		}#
	} else {#
		if(is.null(xlab)[1]){#
			xlab <- paste('dim', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- paste('dim', Dims[2])#
		}#
		plot(x$points[,Dims[1:2]], pch=pch, cex=cex, col=col, xlab=xlab, ylab=ylab, ylim=ylim, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
data(neurBd)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(0,1,5)#
wtsKey <- 1:78#
# cat information from original data#
cats   <- c(rep(1,22), rep(2,6), rep(3,50))#
for(i in 1:3){#
	these <- unique(neurBd[neurBd[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurBd[,2]#
key <- neurBd[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0078, pa=1.125, pd=0.885, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-5)
?neurCond
data(neurCond)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(6,4,15,5,5)#
wtsKey <- 1:256#
# cat information from original data#
cats   <- c(rep(1,29), rep(2,55), rep(3,31), rep(4,16),#
		rep(3,54), rep(5,44), rep(3,27))#
for(i in 1:5){#
	these <- unique(neurCond[neurCond[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurCond[,2]#
key <- neurCond[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
# did not need to list nMissing since implied through wts/wtsKey#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0075, pa=1.1125, pd=0.8875, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
#===> construct weights <===##
# wts found separately#
counts <- c(3,1,3,5)#
wtsKey <- 1:268#
# cat information from original data#
cats   <- c(rep(1,66), rep(2,39), rep(3,80), rep(4,83))#
for(i in 1:4){#
	these <- unique(neurNaive[neurNaive[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurNaive[,2]#
key <- neurNaive[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0106, pa=1.1, pd=0.9, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
library(ppMeasures)
?stDist
library(help=ppMeasures)
.024/sqrt(.016*0.984/1731)
.014/sqrt(.016*0.984/1731)
qnorm(.01)
qnorm(.99)
(.05 / 2.33)^2
.5/(.05 / 2.33)^2
2.33*sqrt(.5*.5/1086)
.25/(.05 / 2.33)^2
2.33*sqrt(.5*.5/543)
.25/(.03 / 2.33)^2
30/220
46/220
sqrt(.136*.864/220)
(.209-.136)/.023
sqrt(.016*0.984/1731)
pnorm(-3.17)
1731*.016
.65/sqrt(50
)
.35/.092
4.58/5
431/932 - 377/937
p <- 102/908
p
sqrt(p*(1-p)/908)
p + c(-1,1)*1.96*sqrt(p*(1-p)/908)
(98.6-98.25)/.63
pnorm(-.56)
.63/sqrt(50)
(98.6-98.25)/(.63/sqrt(50))
4.58/5
431/932 - 377/937
(.04/1.96)^2
.55*.45/(.04/1.96)^2
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1)#
normTail(M=c(-2,-0.3), col='#22558833')
library(openintro)
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1, axes=3)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.6, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')
normTail(5, 13, L=0, M=1:2, U=12)
normTail(5, 13, L=-5, M=1:2, U=12)
normTail(5, 13, L=-5, M=c(0,3, U=12)
)
normTail(5, 13, L=-5, M=c(0,3), U=12)
normTail()
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(-2,2), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(-97,110), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
normTail(par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
normTail(-10, 10, M=c(0,15))
normTail(-10.0, 5.192, M=c(-5,2), digis=2)
normTail(-10.0, 5.192, M=c(-5,2), digis=3)
normTail(-10.0, 5.192, M=c(-5,2), digis=1)
normTail(-10.0, 5.192, M=c(-5,2), digits=1)
normTail(-10.0, 5.192, M=c(-5,2), digits=2)
normTail(-10.0, 5.192, M=c(-5,2), digits=3)
normTail(-10.0, 5.192, M=c(-5,2), digits=1)
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))#
normTail(-10.0, 5.192, M=c(-5,2), digits=1, xAxisIncr=2)
data(textbooks)#
histPlot(textbooks$diff, axes=FALSE)
x <- textbooks$diff#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)
par(mfrow=c(2,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=8)
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=7)
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=6)
x <- textbooks$diff#
par(mfrow=c(2,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=6, nMax=6)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels:#
buildAxis(1, x, n=6, nMin=6, nMax=6)#
buildAxis(1, x, n=6, nMin=6, nMax=7)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
buildAxis(1, x, n=6)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=6)
buildAxis(1, x, n=5)
buildAxis(1, x, n=4)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=4)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis is found for this data with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=6)
library(openintro)
data(possum)
possum[1:5,]
possum[1:5,]
# load in the Boxplot function from helperCode#
require(openintro)
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep('#22558899', 27), rep('#44661144', 27)), pch=c(rep(20, 27), rep(18, 27)))
data(cars)
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep('#22558899', 27), rep('#44661144', 27)), pch=c(rep(20, 27), rep(18, 27)))
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep('#22558899', 27), rep('#44661144', 27)), pch=c(rep(20, 27), rep(18, 1)))
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep('#22558899', 27), rep('#44661144', 27)), pch=c(rep(20, 27), rep(18, 1)))
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep('#22558899', 27), rep('#44661144', 27)), pch=c(rep(20, 27), rep(1, 27)))
COL <- c('#2255884', '#44661199')
COL <- c('#22558844', '#44661199')
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558844', '#44661199')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=1.5, col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558844', '#44661199')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558855', '#44661199')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558844', '#44661199')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), sort(cars$price), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558844', '#44661199')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), rev(sort(cars$price)), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#22558833', '#446611')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), rev(sort(cars$price)), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
# load in the Boxplot function from helperCode#
require(openintro)#
data(cars)#
#
COL <- c('#2255883A', '#446611')#
#
pdf("boxPlotLayout.pdf", 6, 4)#
par(mar=c(0,4,0,1), mgp=c(2.8, 0.7, 0), las=1)#
boxPlot(cars$price, ylab='price ($1000s)', xlim=c(0.3,3), axes=FALSE, ylim=c(0,65))#
axis(2)#
#
arrows(2,0, 1.33,min(cars$price)-0.5, length=0.08)#
text(2,0,'lower whisker', pos=4)#
#
arrows(2, 8, 1.33, quantile(cars$price, 0.25), length=0.08)#
text(2,8,expression(Q[1]~~'(first quartile)'), pos=4)#
#
m <- median(cars$price)#
arrows(2, m, 1.33, m, length=0.08)#
text(2,m,'median', pos=4)#
#
q <- quantile(cars$price, 0.75)#
arrows(2, q, 1.33, q, length=0.08)#
text(2,q,expression(Q[3]~~'(third quartile)'), pos=4)#
#
arrows(2, 46, 1.33, rev(sort(cars$price))[2], length=0.08)#
text(2,46,'upper whisker', pos=4)#
#
arrows(2, 52, 1.33, 49.5, length=0.08)#
lines(c(0.72,1.28), rep(49.5,2), lty=3, col='#00000066')#
text(2,52,'max whisker reach', pos=4)#
#
m <- max(cars$price)#
arrows(2, m-2, 1.33, m-0.5, length=0.08)#
text(2,m-2,'suspected outlier', pos=4)#
#
points(rep(0.4, 54), rev(sort(cars$price)), cex=c(rep(1.5, 27), rep(1, 27)), col=c(rep(COL[1], 27), rep(COL[2], 27)), pch=c(rep(20, 27), rep(1, 27)))#
#
#
#
#
#
#
dev.off()
x <- seq(0.001,.999,0.001)
y <- 1 - x^(-1000)
plot(x,y)
x
y
y <- 1 - x^(-100)
plot(x,y)
y <- x^(-100)
plot(x,y)
y <- exp((1-x)*100)
plot(x,y)
y <- exp(-(1-x)*100)
plot(x,y)
y <- 1-exp(-(1-x)*100)
plot(x,y)
x <- seq(0.001,.999,0.001)#
y <- list()#
r <- seq(-1000, 1000, 1)#
p <- c()
for(i in 1:length(r)){#
	y[[i]] <- 1-exp(-(1-x)*r[i])#
	p[i]   <- mean(y)#
}
i
warnings()
y
x <- seq(0.001,.999,0.001)#
y <- list()#
r <- seq(-100, 100, 1)#
p <- c()
i=1
	y[[i]] <- 1-exp(-(1-x)*r[i])#
	p[i]   <- mean(y[[i]])
y
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- seq(-100, 0, 0.1)#
p <- c()
	y[[i]] <- 1-exp(-(1-x)*r[i])#
	p[i]   <- mean(y[[i]])
y
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- mean(y[[i]])
y
r <- seq(-300, 0, 0.1)
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- mean(y[[i]])
y
p
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])
p
r[1] = 0
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])
p
r[1] = -0.050
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])
p
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- c(-500, -450, -400, -350, -300, -370, -340, -320, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, 1, -0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, 00.1, 0.02), seq(-.09, -0.01, 0.01))#
p <- c()
r <- c(-500, -450, -400, -350, -300, -370, -340, -320, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, 00.1, 0.02), seq(-.09, -0.01, 0.01))#
p <- c()
plot(r)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- c(-500, -450, -400, -350, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, 00.1, 0.02), seq(-.09, -0.01, 0.01))#
p <- c()#
for(i in 1:length(r)){#
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
p
cbind(r, p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- c(-500, -450, -400, -350, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01))#
p <- c()#
for(i in 1:length(r)){#
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
p
plot(r, p)
plot(r, p, log='x')
plot(-r, p, log='x')
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- c(-500, -450, -400, -350, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
for(i in 1:length(r)){#
	y[[i]] <- 1-exp((1-x)*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
p
plot(r, p)
plot(x, y[[300]])
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- c(-500, -450, -400, -350, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
plot(x, y[[300]])
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(-500, -450, -400, -350, -300,#
		seq(-290, -200, 10), seq(-195, -100, 5),#
		seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
plot(x, y[[300]])
plot(x, y[[10]])
p
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-99, -50, 1), seq(-49.5, -15, 0.5),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 2), seq(-49, -15, 1),#
		seq(-14.75, -5, 0.25), seq(-4.9, -2, 0.1),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 10), seq(-49, -15, 2),#
		seq(-14, -5, 0.5), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 10), seq(-49, -15, 1),#
		seq(-14, -5, 0.25), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 10), seq(-49, -15, 2),#
		seq(-14, -5, 0.5), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.5), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01),#
		seq(-0.009, -0.001, 0.001))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.5), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.02), seq(-.09, -0.01, 0.01))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.5), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.05), seq(-0.97, -0.52, 0.03),#
		seq(-0.5, -0.1, 0.04), seq(-.09, -0.01, 0.02))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
97-52
45/5
45/9
4.8-2
2.8/7
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.5), seq(-4.8, -2, 0.4),#
		seq(-1.95, -1, 0.19), seq(-0.97, -0.52, 0.09),#
		seq(-0.5, -0.1, 0.05), seq(-.09, -0.01, 0.02))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.25), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.19), seq(-0.97, -0.52, 0.09),#
		seq(-0.5, -0.1, 0.05), seq(-.09, -0.01, 0.02))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
x <- seq(0.001,0.999,0.001)#
y <- list()#
r <- -c(seq(-100, -50, 25), seq(-49, -13, 4),#
		seq(-12, -5, 0.25), seq(-4.8, -2, 0.2),#
		seq(-1.95, -1, 0.095), seq(-0.97, -0.52, 0.09),#
		seq(-0.5, -0.1, 0.05), seq(-.09, -0.01, 0.02))#
p <- c()#
#
#===> estimate average percentile for each <===##
for(i in 1:length(r)){#
	y[[i]] <- exp(-x*r[i])#
	p[i]   <- sum(x*y[[i]])/sum(y[[i]])#
}
cbind(r,p)
nullDist <- function(n, sim=1000){#
	K <- c()#
	for(i in 1:sim){#
		k <- c()#
		for(j in 1:length(n)){#
			k[j] <- sample(n[i], 1)#
		}#
		K[i] <- sum(k)#
	}#
	return(K)#
}
hold <- nullDist(5:10)
n <- 5:10; sim <- 1000
	K <- c()
i=1
nullDist <- function(n, sim=1000){#
	K <- c()#
	for(i in 1:sim){#
		k <- c()#
		for(j in 1:length(n)){#
			k[j] <- sample(n[j], 1)#
		}#
		K[i] <- sum(k)#
	}#
	return(K)#
}
hold <- nullDist(5:10)
hold
nullDist <- function(n, sim=1000){#
	K <- c()#
	for(i in 1:sim){#
		k <- c()#
		for(j in 1:length(n)){#
			k[j] <- sample(n[j], 1)#
		}#
		K[i] <- sum(k)#
	}#
	return(sort(K))#
}
hold
hold <- nullDist(5:10)
hold
