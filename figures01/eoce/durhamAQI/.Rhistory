				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.4 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed =", round(actual,2)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error: ", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of expected successes: ", suc, ";", "Number of expected failures: ", fail), "\n")	#
					if(suc < 10 || fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error: ", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 || null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# Hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes: ", exp_suc, ";", "Number of expected failures: ", exp_fail), "\n")#
					if(exp_suc < 10 || exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
			}#
		}#
	# two variables#
	}#
	par(mfrow = c(1,1))#
}
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 1000, null = 0.12, alternative = "less")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null = NULL, alternative = c("less","greater","twosided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# load openintro package#
	if(!("openintro" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	if(!("BHH2" %in% names(installed.packages()[,"Package"]))){install.packages("openintro")}#
	library(openintro)#
	library(BHH2)#
		#
	# possible error: weird data#
	if(length(var1) == 1){stop("Sample size is only 1, check input.")}#
	#
	# possible error: missing arguments#
	if(length(est) > 1){stop("Missing estimate: mean, median, or proportion")}#
	if(length(type) > 1){stop("Missing type: confidence interval or hypothesis test")}#
	if(length(method) > 1){stop("Missing method: theoretical or simulation")}#
	#
	if(type == "ht" & is.null(null)){stop("Missing null value")}#
	if(type == "ht" & length(alternative) > 1){stop("Missing alternative: less, greater, or twosided")}#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
		#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you are interested in.")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# define sign of hypothesis test#
	if(type == "ht"){#
		if(alternative == "less"){sign = "<"}#
		if(alternative == "greater"){sign = ">"}#
		if(alternative == "twosided"){sign = "!="}		#
	}#
#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 2)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$y#
				}#
				#
				for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.8 * max(counts), col="#225588", lwd=2)#
			    	text(round(ci[i],2), max(counts), pos=1, col="#225588", round(ci[i],2))#
			  	}#
#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				if(type1 == "quantitative"){#
					for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
					sim_dist_temp = apply(sim, 2, statistic)#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)#
						#cat(mean(sim_dist))#
					}#
										#
					if(est == "median"){#
						cat(paste("H0: median =", null, "\n"))#
						cat(paste("HA: median", sign, null, "\n"))#
						sim_dist = sim_dist_temp - (median(sim_dist_temp) - null)#
						#cat(median(sim_dist))#
					}					#
				}#
				if(type1 == "categorical"){#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					sim_dist = rbinom(nsim, n, prob = null) / n#
				}#
				#
				smaller.tail = round(min(c(mean(sim_dist <= actual), mean(sim_dist >= actual))), 4)	#
				#
				if(nsim > 500){#
					counts = hist(sim_dist, plot = FALSE)$counts  #
					hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic", ylim = c(0, 1.3 * max(counts)))  #
				}#
				if(nsim <= 500){#
					counts = BHH2::dotPlot(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$y#
				}				#
				#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
				}#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="#225588", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col = "#225588", lwd=2)						#
					}		#
				}#
			  	text(x = actual, y = 1.2*max(counts), paste("observed =", round(actual,2)), col = "#225588", cex = 0.8)											#
			}		#
		}#
		#
		# theoretical#
		if(method == "theoretical"){#
			#
			# confidence interval#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# check conditions#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate me and se#
						se = sd(var1) / sqrt(n)#
						cat(paste("Standard error: ", round(se, 4), "\n"))#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}					#
					}#
				}#
				if(type1 == "categorical"){#
					# check conditions#
					suc = round(n * actual, 2)#
					fail = round(n * (1 - actual), 2)#
					cat(paste("Number of expected successes: ", suc, ";", "Number of expected failures: ", fail), "\n")	#
					if(suc < 10 || fail < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					# calculate me and se#
					se = sqrt(actual * (1-actual) / n)#
					cat(paste("Standard error: ", round(se, 4), "\n"))#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],2), ",", round(ci[2],2), ")\n"))	#
			}#
			#
			# hypothesis test#
			if(type == "ht"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						# Hypotheses#
						cat(paste("H0: mu =", null, "\n"))#
						cat(paste("HA: mu", sign, null, "\n"))#
						#
						# check conditions#
						par(mfrow = c(1,2))#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")#
						# calculate test statistic and p-value component#
						se = sd(var1) / sqrt(n)#
						teststat = (actual - null)/se#
						if(n >= 50){#
							cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
							smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)#
							}#
						if(n < 50){#
							cat(paste("Test statistic: T = ", round(teststat, 3),"\n"))#
							cat(paste("Degrees of freedom: ", n - 1, "\n"))#
							smaller.tail = round(min(pt(teststat, df = n - 1), pt(teststat, df = n - 1, lower.tail = FALSE)), 4)#
							}		#
					}#
				}#
				if(type1 == "categorical"){#
					if(null < 0 || null > 1){#
						stop("Null value should be a proportion between 0 and 1.")#
					}#
					# Hypotheses#
					cat(paste("H0: p =", null, "\n"))#
					cat(paste("HA: p", sign, null, "\n"))#
					#
					#
					# check conditions#
					exp_suc = round(n * null, 2)#
					exp_fail = round(n * (1 - null), 2)#
					cat(paste("Number of expected successes: ", exp_suc, ";", "Number of expected failures: ", exp_fail), "\n")#
					if(exp_suc < 10 || exp_fail < 10){#
						stop("There aren't at least 10 expected successes and 10 expected failures, use simulation methods instead.")#
					}#
					# calculate test statistic and p-value#
					se = sqrt(null * (1 - null) / n)#
					teststat = (actual - null)/se#
					cat(paste("Test statistic: Z = ", round(teststat, 3),"\n"))#
					smaller.tail = round(min(pnorm(teststat), pnorm(teststat, lower.tail = FALSE)), 4)					#
				}#
#
				# alternative = less#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					normTail(L = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, teststat, 0, 3), labels = c(NA, paste(round(actual,2)), paste(null), NA))#
				}#
#
				# alternative = greater#
				if(alternative == "greater"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					normTail(U = teststat, axes = FALSE, col = "#22558833")#
					axis(1, at = c(-3, 0, teststat, 3), labels = c(NA, paste(null), paste(round(actual,2)), NA))#
				}#
				#
				# alternative = twosided	#
				if(alternative == "twosided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					if(actual < null){#
						normTail(L = teststat, U = -1*teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, teststat, 0, -1*teststat, 3), labels = c(NA, paste(round(actual,2)), paste(null), paste(round(null + (null - actual), 2)), NA))#
					}#
					if(actual > null){#
						normTail(L = -1*teststat, U = teststat, axes = FALSE, col = "#22558833")#
						axis(1, at = c(-3, -1*teststat, 0, teststat, 3), labels = c(NA, paste(round(null - (actual - null), 2)), paste(null), paste(round(actual,2)), NA))#
					}				#
				}#
			}#
		}#
	# two variables#
	}#
	par(mfrow = c(1,1))#
}
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 1000, null = 0.12, alternative = "less")
inference(f, est = "mean", type = "ht", method = "simulation", nsim = 100, null = 0.12, alternative = "less")
q()
0.4^7
a = read.delim("/Users/mine/Downloads/RD_501_88101_2011/RD_501_88101_2011-0.txt", sep = "|")
dim(a)
head(a)
table(a$State Code)
table(a$State.Code)
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Exams/Midterm 1/figures/aqi")
d = read.csv("pm25_2011_durham.csv")
heaD(d)
head(d)
d = d[d$DAILY_AQI_VALUE != "."]
d = d[d$DAILY_AQI_VALUE != ".",]
hist(d$DAILY_AQI_VALUE)
d$DAILY_AQI_VALUE
d$DAILY_AQI_VALUE = as.numeric(d$DAILY_AQI_VALUE)
hist(d$DAILY_AQI_VALUE)
library(BHH2)
500*.9
400*.9
200*.1
n = length(d$DAILY_AQI_VALUE)
b = rep(0, 200)
set.seed(2354)#
#
for(i in 1:200){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
ci = c(quantile(b, 0.025), quantile(b, 0.975))
dotPlot(b)
mean(d$DAILY_AQI_VALUE)
n
d$DAILY_AQI_VALUE
head(d)
d = read.csv("pm25_2011_durham.csv")
head(d)
d = d[d$DAILY_AQI_VALUE != ".",]
head(d)
class(d$DAILY_AQI_VALUE)
d$DAILY_AQI_VALUE = as.numeric(d$DAILY_AQI_VALUE)
class(d$DAILY_AQI_VALUE)
head(d)
d = read.csv("pm25_2011_durham.csv")#
#
d = d[d$DAILY_AQI_VALUE != ".",]#
#
d$DAILY_AQI_VALUE = as.numeric(as.character(d$DAILY_AQI_VALUE))
head(d)
n = length(d$DAILY_AQI_VALUE)
mean(d$DAILY_AQI_VALUE)
b = rep(0, 200)#
#
set.seed(2354)#
#
for(i in 1:200){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 200)#
#
set.seed(12356)#
#
for(i in 1:200){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 100)#
#
set.seed(3267)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 100)#
#
set.seed(3256)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 100)#
#
set.seed(2346)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 100)#
#
set.seed(9674)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
dotPlot(b)
b = rep(0, 100)#
#
set.seed(345678)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
dotPlot(b)
b = rep(0, 100)#
#
set.seed(23457)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
b = rep(0, 100)#
#
set.seed(345678)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
dotPlot(b)
b = rep(0, 100)#
#
set.seed(2345678)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}
b = rep(0, 100)#
#
set.seed(345678)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
dotPlot(b)
b = rep(0, 100)#
#
set.seed(123)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
dotPlot(b)
b = rep(0, 100)#
#
set.seed(1234)#
#
for(i in 1:100){#
  	boot_samp <- sample(d$DAILY_AQI_VALUE, n, replace = TRUE)#
   	b[i] <- mean(boot_samp)#
   	}#
#
dotPlot(b)
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19)
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19, col = col = "#22558866")
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19, col = "#22558866")
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19, col = "#225588")
?dotPlot
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19, pch.size = 0.7)
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 19)
dotPlot(b, axes = FALSE, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 20)
dotPlot(b, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 20)
i = 1
i+4
i+i*4
i=2
i+i*4
labels = seq(28,35,0.25)
labels
length(labels)
29-1
to_keep = c()#
for(i in 1:7){#
	to_keep = c(to_keep, 1 + 4*i)#
}
to_keep
labels = rep(NA, length(labels_temp))
labels_temp = seq(28,35,0.25)#
labels = rep(NA, length(labels_temp))
labels
labels_temp = seq(28,35,0.25)#
labels = rep(NA, length(labels_temp))#
#
to_keep = c()#
for(i in 1:7){#
	to_keep = c(to_keep, 1 + 4*i)#
}#
#
for(i in to_keep[1]:to_keep[7]){#
	labels[i] = labels_temp[i]#
}
labels
to_keep
to_keep[1]:to_keep[7]
for(i in to_keep){#
	labels[i] = labels_temp[i]#
}
labels
to_keep
as.vector(to_keep)
labels_temp = seq(28,35,0.25)#
labels = rep(NA, length(labels_temp))#
#
to_keep = c()#
for(i in 1:7){#
	to_keep = c(to_keep, 1 + 4*i)#
}#
#
for(i in to_keep){#
	labels[i] = labels_temp[i]#
}
labels
dotPlot(b, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 20, xlim = c(28,35), axes = FALSE)#
axis(1, at = seq(28,35,0.25), label = labels)
labels_temp = seq(28,35,0.25)#
labels = rep(NA, length(labels_temp))#
#
to_keep = c()#
for(i in 1:7){#
	to_keep = c(to_keep, 1 + 4*i)#
}#
#
labels[1] = labels_temp[1]#
for(i in to_keep){#
	labels[i] = labels_temp[i]#
}#
#
dotPlot(b, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 20, xlim = c(28,35), axes = FALSE)#
axis(1, at = seq(28,35,0.25), label = labels)
pdf("aqi_boot_ci.pdf", height = 3, width = 7)#
par(mar=c(4,0,2,0), mgp=c(2.3,0.7,0))#
BHH2::dotPlot(b, xlab = "bootstrap means", main = "Bootstrap distribution", pch = 20, xlim = c(28,35), axes = FALSE)#
axis(1, at = seq(28,35,0.25), label = labels)#
dev.off()
head(d)
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588")
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588")
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value")
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = x(0,20))
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20))
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20), main = "")
par(mar=c(4,3,0,0), mgp=c(2.3,0.7,0))#
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20), main = "")
par(mar=c(4,4,0,0), mgp=c(2.3,0.7,0))#
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20), main = "")
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20), main = "")
pdf("aqi_hist.pdf", height = 3, width = 5)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
hist(d$DAILY_AQI_VALUE, col="#22558833", border="#225588", xlab = "daily AQI value", ylim = c(0,20), main = "")#
dev.off()
summary(d$DAILY_AQI_VALUE)
q()
