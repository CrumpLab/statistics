library(maps)#
library(openintro)#
#
countyMap <- function(values, FIPS, col=c("red", "green", "blue"), varTrans=I){#
  if(missing(FIPS)){#
    stop("Must provide the county FIPS")#
  }#
  #===> Drop NAs <===##
  FIPS   <- FIPS[!is.na(values)]#
  values <- values[!is.na(values)]#
  #===> Scale Values <===##
  MI <- min(values)#
  MA <- max(values)#
  if(identical(varTrans, log)){#
    valCol <- varTrans(values+0.1)#
  } else {#
    valCol <- varTrans(values)#
  }#
  valCol <- 0.8*(valCol - MI)/(MA - MI) + 0.1#
  if(col[1] == "red"){#
    col <- rgb(valCol, 0.2, 0.2)#
  } else if(col[1] == "green"){#
    col <- rgb(0.2, valCol, 0.2)#
  } else {#
    col <- rgb(0.2, 0.2, valCol)#
  }#
  #===> Remove These <===##
  data(county.fips)#
  col <- col[match(county.fips$fips, FIPS)]#
  map("county", col=col, fill=TRUE, resolution=0,#
    lty=0, projection="polyconic")#
}#
data(countyComplete)#
data(county)#
countyMap(county$poverty, countyComplete$FIPS)
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS)
?maps
?map
install.packages("maps")#
library(maps)#
countyMap <- function(values, FIPS, col=c("red", "green", "blue"), varTrans=I){#
  if(missing(FIPS)){#
    stop("Must provide the county FIPS")#
  }#
  #===> Drop NAs <===##
  FIPS   <- FIPS[!is.na(values)]#
  values <- values[!is.na(values)]#
  #===> Scale Values <===##
  MI <- min(values)#
  MA <- max(values)#
  if(identical(varTrans, log)){#
    valCol <- varTrans(values+0.1)#
  } else {#
    valCol <- varTrans(values)#
  }#
  valCol <- 0.8*(valCol - MI)/(MA - MI) + 0.1#
  if(col[1] == "red"){#
    col <- rgb(valCol, 0.2, 0.2)#
  } else if(col[1] == "green"){#
    col <- rgb(0.2, valCol, 0.2)#
  } else {#
    col <- rgb(0.2, 0.2, valCol)#
  }#
  #===> Remove These <===##
  data(county.fips)#
  col <- col[match(county.fips$fips, FIPS)]#
  map("county", col=col, fill=TRUE, resolution=0,#
    lty=0, projection="polyconic", mar=c(1,1,1,1))#
}
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS)
?map
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS)
axis(1)
countyMap(county$poverty, countyComplete$FIPS)
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS)
box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, myborder=0)
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, myborder=0)#
box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, fill=TRUE)#
box()
par("xpd")
?par
par("usr")
cat(par("usr"), sep=",")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, myborder=0)#
box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, myborder=0)#
#box()
install.packages("maps")#
library(maps)#
countyMap <- function(values, FIPS, col=c("red", "green", "blue"), varTrans=I, ...){#
  if(missing(FIPS)){#
    stop("Must provide the county FIPS")#
  }#
  #===> Drop NAs <===##
  FIPS   <- FIPS[!is.na(values)]#
  values <- values[!is.na(values)]#
  #===> Scale Values <===##
  MI <- min(values)#
  MA <- max(values)#
  if(identical(varTrans, log)){#
    valCol <- varTrans(values+0.1)#
  } else {#
    valCol <- varTrans(values)#
  }#
  valCol <- 0.8*(valCol - MI)/(MA - MI) + 0.1#
  if(col[1] == "red"){#
    col <- rgb(valCol, 0.2, 0.2)#
  } else if(col[1] == "green"){#
    col <- rgb(0.2, valCol, 0.2)#
  } else {#
    col <- rgb(0.2, 0.2, valCol)#
  }#
  #===> Remove These <===##
  data(county.fips)#
  col <- col[match(county.fips$fips, FIPS)]#
  plot(0,0,type="n", axes=FALSE)#
  par(mar=rep(0.1,4), usr=c(-0.4018401,0.3785701,0.4303029,0.9299105))#
  map("county", col=col, fill=TRUE, #resolution=0,#
    lty=0, projection="polyconic", mar=rep(0.1,4), add=TRUE, ...)#
}
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, myborder=0)#
#box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS)#
#box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, "blue", countyComplete$FIPS)#
#box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "blue")#
#box()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
#box()
countyMap(county$homeownership, countyComplete$FIPS, "or")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
countyMap(county$homeownership, countyComplete$FIPS, "or")#
#
#box()
countyMap(county$homeownership, countyComplete$FIPS, "or")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
countyMap(county$homeownership, countyComplete$FIPS, "or")#
#
#box()
mean(county$homeownership)
mean(county$homeownership, na.rm=TRUE)
county[1,]
library(openintro); county <- countyComplete[,c("name", "state", "pop2000", "pop2010", "fed_spending", "poverty", "home_ownership", "housing_multi_unit", "per_capita_income", "median_household_income")]; colnames(county) <- c("name", "state", "pop2000", "pop2010", "fed_spend", "poverty", "homeownership", "multiunit", "income", "med_income"); county$fed_spend <- county$fed_spend / county$pop2010
county[1,]
save(county, file="county.rda")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
countyMap(county$homeownership, countyComplete$FIPS, "or")#
#
#box()
countyMap(county$homeownership, countyComplete$FIPS, "ye")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
countyMap(county$homeownership, countyComplete$FIPS, "ye")#
#
#box()
countyMap(county$poverty, countyComplete$FIPS, "bg")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
range(county$poverty)
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
countyMap(county$homeownership, countyComplete$FIPS, "ye")
countyMap(county$poverty, countyComplete$FIPS, "bg")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf")#
countyMap(county$homeownership, countyComplete$FIPS, "ye")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf")#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf")#
countyMap(county$homeownership, countyComplete$FIPS, "ye")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf")#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyPovertyMap.pdf")#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf")#
countyMap(county$med_income, countyComplete$FIPS, "ye")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
source("countyMap.R")
countyMap(county$poverty, countyComplete$FIPS, "bg")
map("USA")
map("states")
map("state")
map("state", projection="polyconic")
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyPovertyMap.pdf", 5.2)#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
countyMap(county$med_income, countyComplete$FIPS, "ye")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
countyMap(county$homeownership, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
countyMap(county$med_income/1000, countyComplete$FIPS, "ye")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
countyMap(county$poverty, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
countyMap(county$homeownership, countyComplete$FIPS, "red")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
countyMap(county$med_income/1000, countyComplete$FIPS, "green")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
countyMap(county$poverty, countyComplete$FIPS, "red")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
countyMap(county$homeownership, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
countyMap(county$med_income/1000, countyComplete$FIPS, "green")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
countyMap(val, countyComplete$FIPS, "red")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
countyMap(county$fed_spend, countyComplete$FIPS, "ye")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
countyMap(county$homeownership, countyComplete$FIPS, "bg")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
countyMap(county$med_income/1000, countyComplete$FIPS, "green")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 30] <- 30#
countyMap(county$fed_spend, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 25] <- 25#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 30] <- 30#
countyMap(county$fed_spend, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 40] <- 40#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 30] <- 30#
countyMap(county$fed_spend, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 50] <- 50#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 30] <- 30#
countyMap(county$fed_spend, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 20] <- 20#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 70] <- 70#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 5.2)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 5.2)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 5.2)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 5.2)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 8, 4.5)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
install.packages("maps")#
library(maps)#
countyMap <- function(values, FIPS, col=c("red", "green", "blue"), varTrans=I, gtlt="", ...){#
  if(missing(FIPS)){#
    stop("Must provide the county FIPS")#
  }#
  #===> Drop NAs <===##
  FIPS   <- FIPS[!is.na(values)]#
  values <- values[!is.na(values)]#
  #===> Scale Values <===##
  MI  <- min(values)#
  MA  <- max(values)#
  Leg <- seq(MI, MA, length.out=50)#
  if(identical(varTrans, log)){#
    VAL    <- varTrans(values+0.1)#
    valCol <- varTrans(values+0.1)#
    LegCol <- varTrans(Leg+0.1)#
  } else {#
    VAL    <- varTrans(values)#
    valCol <- varTrans(values)#
    LegCol <- varTrans(Leg)#
  }#
  valCol <- 0.7*(valCol - MI)/(MA - MI) + 0.1#
  LegCol <- 0.7*(LegCol - MI)/(MA - MI) + 0.1#
  if(col[1] == "red"){#
    col <- rgb(1-valCol, 0.5*(1 - valCol), 0.5*(1 - valCol))#
    COL <- rgb(1-LegCol, 0.5*(1 - LegCol), 0.5*(1 - LegCol))#
  } else if(col[1] == "green"){#
    col <- rgb(0.2, 1-valCol, 0.2)#
    COL <- rgb(0.2, 1-LegCol, 0.2)#
  } else if(col[1] == "bg"){#
    col <- rgb(0.2, (1-valCol)*0.7, (1-valCol)*0.9)#
    COL <- rgb(0.2, (1-LegCol)*0.7, (1-LegCol)*0.9)#
  } else if(col[1] == "ye"){#
    col <- rgb(1-valCol, 1-valCol, 0.3)#
    COL <- rgb(1-LegCol, 1-LegCol, 0.3)#
  } else {#
    col <- rgb(0.2, 0.2, 1-valCol)#
    COL <- rgb(0.2, 0.2, 1-LegCol)#
  }#
  #===> Remove These <===##
  data(county.fips)#
  col <- col[match(county.fips$fips, FIPS)]#
  plot(0,0,type="n", axes=FALSE, xlab="", ylab="")#
  par(mar=rep(0.1,4), usr=c(-0.385,0.41,0.44,0.91))#
  map("county", col=col, fill=TRUE, resolution=0,#
    lty=0, projection="polyconic", mar=rep(0.1,4), add=TRUE, ...)#
  x1 <- 0.335#
  x2 <- 0.365#
  for(i in 1:50){#
    y1 <- i/50 * 0.25 + 0.5#
    y2 <- (i-1)/50 * 0.25 + 0.5#
    rect(x1, y1, x2, y2, border="#00000000", col=COL[i])#
  }#
  VR    <- range(VAL)#
  VR[3] <- VR[2]#
  VR[2] <- mean(VR[c(1,3)])#
  VR1    <- c()#
  VR1[1] <- values[which.min(abs(VAL - VR[1]))]#
  VR1[2] <- values[which.min(abs(VAL - VR[2]))]#
  VR1[2] <- values[which.min(abs(VAL - VR[3]))]#
  VR    <- round(VR)#
  if(gtlt %in% c(">", "><")){#
    VR[3] <- paste(">", VR[3], sep="")#
  }#
  if(gtlt %in% c("<", "><")){#
    VR[1] <- paste("<", VR[1], sep="")#
  }#
  text(0.365, 0.51, VR[1], pos=4)#
  text(0.365, 0.625, VR[2], pos=4)#
  text(0.365, 0.74, VR[3], pos=4)#
}
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 30] <- 30#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
source("countyMap.R")
val <- county$travel_time#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
?countyComplete
val <- countyComplete$mean_work_travel#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 25] <- 35#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 25] <- 40#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 25] <- 45#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
hist(countyComplete$mean_work_travel)
val <- countyComplete$mean_work_travel#
val[val > 25] <- 45#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 25] <- 50#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 35] <- 35#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
val <- countyComplete$mean_work_travel#
val[val > 33] <- 33#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")
library(help=openintro)
data(smoking)
smoking[1:2,]
hist(smoking$amtWeekdays)
hist(smoking$amtWeekdays, 20)
hist(smoking$amtWeekends, 20)
hist(smoking$amtWeekends, 25)
IQR(smoking$amtWeekends)
IQR(smoking$amtWeekends, rm.na=TRUE)
IQR(smoking$amtWeekends, na.rm=TRUE)
IQR(smoking$amtWeekdays, na.rm=TRUE)
library(openintro)#
data(countyComplete)#
data(county)#
data(COL)
?COL
library(openintro)#
data(countyComplete)#
data(county)#
data(COL)#
source("countyMapNew.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(maps)
library(mapproj)
install.packges("mapproj")
install.packages("mapproj")
library(openintro)#
data(countyComplete)#
data(county)#
data(COL)#
source("countyMapNew.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
1-.886*.5
1-(1-.318)*.5
1-(1-c(337, 447, 608, 741, 863, 941, 957)/1000)*.5
library(openintro)#
data(countyComplete)#
data(county)#
data(COL)#
source("countyMapNew.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
library(openintro)#
data(countyComplete)#
data(county)#
data(COL)#
source("countyMap.R")#
#
myPDF("countyPovertyMap.pdf", 7.8, 4.5)#
val <- county$poverty#
val[val > 25] <- 25#
countyMap(val, countyComplete$FIPS, "red", gtlt=">")#
dev.off()#
#
myPDF("countyFedSpendMap.pdf", 7.8, 4.5)#
val <- county$fed_spend#
val[val > 18] <- 18#
countyMap(val, countyComplete$FIPS, "ye", gtlt=">")#
dev.off()#
#
myPDF("countyHomeownershipMap.pdf", 7.8, 4.5)#
val <- county$homeownership#
val[val < 55] <- 55#
countyMap(val, countyComplete$FIPS, "bg", gtlt="<")#
dev.off()#
#
myPDF("countyMedIncomeMap.pdf", 7.8, 4.5)#
val <- county$med_income/1000#
val[val > 60] <- 60#
countyMap(val, countyComplete$FIPS, "green", gtlt=">")#
dev.off()
?map
data(ozone)#
map("state", xlim = range(ozone$x), ylim = range(ozone$y))#
text(ozone$x, ozone$y, ozone$median)#
box()#
if(require(mapproj)) {	# mapproj is used for  projection="polyconic"#
  # color US county map by 2009 unemployment rate#
  # match counties to map using FIPS county codes#
  # Based on J's solution to the "Choropleth Challenge"#
  # http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html#
#
  # load data#
  # unemp includes data for some counties not on the "lower 48 states" county#
  # map, such as those in Alaska, Hawaii, Puerto Rico, and some tiny Virginia#
  #  cities#
  data(unemp)#
  data(county.fips)#
#
  # define color buckets#
  colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
  unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))#
  leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")#
#
  # align data with map definitions by matching FIPS codes#
  # works much better than trying to match the state, county names#
  # which also include multiple polygons for some counties#
  colorsmatched <- unemp$colorBuckets [match(county.fips$fips, unemp$fips)]#
#
  # draw map#
  map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0,#
    lty = 0, projection = "polyconic")#
  map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,#
    projection="polyconic")#
  title("unemployment by county, 2009")#
  legend("topright", leg.txt, horiz = TRUE, fill = colors)#
#
  # Choropleth Challenge example, based on J's solution, see:#
  # http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html#
  # To see the faint county boundaries, use RGui menu:  File/SaveAs/PDF#
}
data(ozone)#
map("state", xlim = range(ozone$x), ylim = range(ozone$y))#
text(ozone$x, ozone$y, ozone$median)#
box()#
if(require(mapproj)) {	# mapproj is used for  projection="polyconic"#
  # color US county map by 2009 unemployment rate#
  # match counties to map using FIPS county codes#
  # Based on J's solution to the "Choropleth Challenge"#
  # http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html#
#
  # load data#
  # unemp includes data for some counties not on the "lower 48 states" county#
  # map, such as those in Alaska, Hawaii, Puerto Rico, and some tiny Virginia#
  #  cities#
  data(unemp)#
  data(county.fips)#
#
  # define color buckets#
  colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
  unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))#
  leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")#
#
  # align data with map definitions by matching FIPS codes#
  # works much better than trying to match the state, county names#
  # which also include multiple polygons for some counties#
  colorsmatched <- unemp$colorBuckets [match(county.fips$fips, unemp$fips)]#
#
  # draw map#
  map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0,#
    lty = 0, projection = "polyconic")#
  map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,#
    projection="polyconic")#
  title("unemployment by county, 2009")#
  legend("topright", leg.txt, horiz = TRUE, fill = colors)#
#
  # Choropleth Challenge example, based on J's solution, see:#
  # http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html#
  # To see the faint county boundaries, use RGui menu:  File/SaveAs/PDF#
}
