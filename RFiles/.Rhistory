LBData
LBData<-data.frame()
LBData<-rbind(LBData,data.frame(sub,Bcor,Lcor,meanIKSI))
LBData
sub=3
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
}
#Analyze one subject for bigram correlations
BData<-AllData[AllData$CBigrams==11,]
SubjectData<-aggregate(IKSIs~Bigrams,BData,mean)
RestrictedBigramCounts<-JonesBigrams[JonesBigrams$comboLets %in% SubjectData$Bigrams,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Bigrams %in% RestrictedBigramCounts$comboLets,]
Bcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedBigramCounts$NYT)
#Letter Frequency Analysis
LData<-AllData[AllData$CLetters==1,]
SubjectData<-aggregate(IKSIs~Letters,LData,mean)
RestrictedLetterCounts<-JonesSingle[JonesSingle$Char %in% SubjectData$Letter,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Letter %in% RestrictedLetterCounts$Char,]
Lcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedLetterCounts$NYT)
meanIKSI<-mean(SubjectData$IKSIs)
LBData<-rbind(LBData,data.frame(sub,Bcor,Lcor,meanIKSI))
LBData
LBData<-data.frame()
#sub=2 # set subject number to read in corresponding line from data file
for(sub in seq(2,10)){
#Read Data into temporary variable for unpacking
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
#Analyze one subject for bigram correlations
BData<-AllData[AllData$CBigrams==11,]
SubjectData<-aggregate(IKSIs~Bigrams,BData,mean)
RestrictedBigramCounts<-JonesBigrams[JonesBigrams$comboLets %in% SubjectData$Bigrams,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Bigrams %in% RestrictedBigramCounts$comboLets,]
Bcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedBigramCounts$NYT)
#Letter Frequency Analysis
LData<-AllData[AllData$CLetters==1,]
SubjectData<-aggregate(IKSIs~Letters,LData,mean)
RestrictedLetterCounts<-JonesSingle[JonesSingle$Char %in% SubjectData$Letter,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Letter %in% RestrictedLetterCounts$Char,]
Lcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedLetterCounts$NYT)
meanIKSI<-mean(SubjectData$IKSIs)
LBData<-rbind(LBData,data.frame(sub,Bcor,Lcor,meanIKSI))
}
}
LBData
plot(LBData$meanIKSI,LBData$Lcor)
LBData<-data.frame()
#sub=2 # set subject number to read in corresponding line from data file
for(sub in seq(2,100)){
#Read Data into temporary variable for unpacking
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
#Analyze one subject for bigram correlations
BData<-AllData[AllData$CBigrams==11,]
SubjectData<-aggregate(IKSIs~Bigrams,BData,mean)
RestrictedBigramCounts<-JonesBigrams[JonesBigrams$comboLets %in% SubjectData$Bigrams,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Bigrams %in% RestrictedBigramCounts$comboLets,]
Bcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedBigramCounts$NYT)
#Letter Frequency Analysis
LData<-AllData[AllData$CLetters==1,]
SubjectData<-aggregate(IKSIs~Letters,LData,mean)
RestrictedLetterCounts<-JonesSingle[JonesSingle$Char %in% SubjectData$Letter,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Letter %in% RestrictedLetterCounts$Char,]
Lcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedLetterCounts$NYT)
meanIKSI<-mean(SubjectData$IKSIs)
LBData<-rbind(LBData,data.frame(sub,Bcor,Lcor,meanIKSI))
}
}
sub=12
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
}
sub=11
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
}
sub=13
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
}
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
data
pstep=0
AllData<-data.frame()
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
pstep=4
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
pstep=8
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
pstep=12
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
pstep=16
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is
data[17+pstep]
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
TypedCharacters
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
AllData<-rbind(AllData,tempData)
pstep
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
sub
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
#Generate Dataframe
#Subject number,Paragraph Type,Paragraph Number, IKSIs, Letter, Bigram, Correct
AllData<-data.frame()
if (length(data)==42){
for(pstep in seq(0,6*4,by=4)){
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
}
#Analyze one subject for bigram correlations
BData<-AllData[AllData$CBigrams==11,]
SubjectData<-aggregate(IKSIs~Bigrams,BData,mean)
RestrictedBigramCounts<-JonesBigrams[JonesBigrams$comboLets %in% SubjectData$Bigrams,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Bigrams %in% RestrictedBigramCounts$comboLets,]
Bcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedBigramCounts$NYT)
#Letter Frequency Analysis
LData<-AllData[AllData$CLetters==1,]
SubjectData<-aggregate(IKSIs~Letters,LData,mean)
RestrictedLetterCounts<-JonesSingle[JonesSingle$Char %in% SubjectData$Letter,]
RestrictedSubjectIKSIs<-SubjectData[SubjectData$Letter %in% RestrictedLetterCounts$Char,]
Lcor<-cor(RestrictedSubjectIKSIs$IKSIs,RestrictedLetterCounts$NYT)
meanIKSI<-mean(SubjectData$IKSIs)
LBData<-rbind(LBData,data.frame(sub,Bcor,Lcor,meanIKSI))
}
sub
pstep=16
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
#Append to Global dataFrame
AllData<-rbind(AllData,tempData)
pstep=20
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
24
pstep=24
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
#Create Data frame for one paragraph
tempData<-data.frame(Subject,ParagraphType,IKSIs,
Letters=TypedCharacters[2:(length(TypedCharacters)-1)],
Bigrams,CLetters=CorrectLetters[2:(length(CorrectLetters)-1)],CBigrams=CorrectBigrams)
tIKSIs<-unlist(strsplit(data[16+pstep],split=",")) #unpack IKSIs as characters
IKSIs<-as.numeric(tIKSIs[4:(length(tIKSIs)-1)]) # convert to numeric, length is minus one because final bigram is eliminated
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep]) #convert typed commas to `
TypedCharacters<-unlist(strsplit(data[17+pstep],split=",")) #unpack typedCharacters
TypedCharacters<-gsub("`",",",TypedCharacters) #convert ` back to commas
TypedCharacters<-TypedCharacters[5:length(TypedCharacters)] #start at element 5 (skips condition codes)
Correct<-unlist(strsplit(data[18+pstep],",")) #unpack correct codes
CorrectLetters<-Correct[5:length(Correct)] #start at element 5
Bigrams<-makeNgrams(TypedCharacters,1) #generate Bigram conditions from typed Letters
CorrectBigrams<-makeNgrams(CorrectLetters,1) #generate accuracy codes for bigrams (11 is correct)
Subject<-rep(sub,length(IKSIs))
ParagraphType<-rep(tIKSIs[2],length(IKSIs))
data
data[36]
test<-scan(file="external_hit.results", what = "character", sep = " ", skip=(0+sub), nlines=1)
data<-unlist(strsplit(test,split=":"))
data
pstep=24
tIKSIs<-unlist(strsplit(data[16+pstep],split=","))
tIKSIs
data[17+pstep]<-gsub(",,,",",`,",data[17+pstep])
TypedCharacters<-unlist(strsplit(data[17+pstep],split=","))
TypedCharacters
Correct<-unlist(strsplit(data[18+pstep],","))
Correct
TypedCharacters
\end{document}
AllData<-read.table("\RFiles\SingleFactor_Between.txt",header=TRUE,sep="\t")
AllData<-read.table("/RFiles/SingleFactor_Between.txt",header=TRUE,sep="\t")
AllData<-read.table("RFiles/SingleFactor_Between.txt",header=TRUE,sep="\t")
AllData<-read.table("~/RFiles/SingleFactor_Between.txt",header=TRUE,sep="\t")
AllData<-read.table("~/Documents/Latex/RFiles/SingleFactor_Between.txt",header=TRUE,sep="\t")
getwd()
setwd("~/Documents/Latex/RFiles")
AllData<-read.table("SingleFactor_Between.txt",header=TRUE,sep="\t")
summary(aov(DV~IV1,AllData))
N_features <- 20
N_study <- 50
N_subjects <- 100
L <- 0.75
Tau <- 3
Features <- c(1, 0, -1)
# Global data structures
Negative_familiarities <- matrix(0, N_subjects, N_study)
Positive_familiarities <- matrix(0, N_subjects, N_study)
Hit_rates <- matrix(0, N_subjects)
FA_rates <- matrix(0, N_subjects)
k=1
Positives <- matrix(0, N_study, N_features)
Negatives <- matrix(0, N_study, N_features)
for (i in 1:N_study) {
Positives[i,] <- sample(Features, N_features, replace=T)
Negatives[i,] <- sample(Features, N_features, replace=T)
}
